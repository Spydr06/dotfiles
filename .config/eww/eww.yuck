;
; Spydr06's eww configuration
; https://github.com/spydr06/dotfiles.git
;

(defwidget outer-window []
  (box :class "outer-window")
)

(defwidget date []
  (box :orientation "v" :space-evenly "true"
    (box :orientation "h"
      :class "time"
      
      (box :class "hour" hour)
      (box :class "semicolon" "//")
      (box :class "minute" minute)
    )
    (box :orientation "v" :class "day"
      (box :class "weekday" weekday)
    )
  )
)

(defwidget cal []
  (calendar :class "cal" :width "250"))

(defwidget profile []
  (box :orientation "h"
    :space-evenly "true"
    
    (box :class "pfp")
    (box :class "text" :orientation "v"
      :space-evenly "true"
      
      (box :class "username" "Spydr")
    )
  )
)

(defwidget quicksettings []
  (box :class "quicksettings" :orientation "h"
    (button :class "powermenu-btn"
      :onclick "./scripts/powermenu.sh"
      :tooltip "Power Menu"
    "")
    (button :class "settings-btn"
      :onclick "./scripts/sidebar.sh close && xfce4-settings-manager &"
      :tooltip: "Settings"
    "")
    (button :class "terminal-btn"
      :onclick "./scripts/sidebar.sh close && alacritty -e zsh &"
      :tooltip: "Terminal"
    "")
    (button :class "play-btn"
      :onclick "playerctl play-pause"
      :tooltip: "${play_tooltip}"
    "${play_icon}")
  )
)

(defwidget powermenu []
  (box :class "powermenu" :orientation "v"
    (button :class "poweroff-btn"
      :tooltip "Shutdown"
      :onclick "systemctl poweroff"
    "")
    (button :class "restart-btn"
      :tooltip: "Reboot"
      :onclick "systemctl reboot"
    "")
    (button :class "lock-btn"
      :tooltip "Lock"
      :onclick "./scripts/powermenu.sh close && light-locker-command -l"
    "")
    (button :class "logout-btn"
      :tooltip "Logout"
      :onclick "bspc quit"
    "")
    (button :class "suspend-btn"
      :tooltop: "Suspend"
      :onclick "./scripts/powermenu.sh close && systemctl suspend"
    "")
  )
)

(defwidget system []
  (box    :orientation "v"
    :class "system"
    :space-evenly false
    :spacing 10;
    :valign "center"
    :halign "center"
    :width "250"
    
    (box    :orientation "h"
      :class "metric-ram"
      :space-evenly false
      (label  :text "CPU"
      :class "metric-label")
      (scale  :min 0
        :max 101
        :active "false"
      :value "${cpu}")
    )
    
    (box    :orientation "h"
      :class "metric-ram"
      :space-evenly false
      (label  :text "RAM"
      :class "metric-label")
      (scale  :min 0
        :max 101
        :active "false"
      :value "${ram}")
    )
    
    (box    :orientation "h"
      :class "metric-vol"
      :space-evenly false
      (label  :text "VOL"
      :class "metric-label")
      (scale  :min 0
        :max 101
        :active "true"
        :value "${vol}"
      :onchange "pulsemixer --set-volume {}")
    )
  )
)

(defwidget disks []
  (box :orientation "v"
    :class "system"
    :space-evenly false
    :spacing 10;
    :valign "center"
    :halign "center"
    :width "250"
    
    (box :orientation "h"
      :class "metric-root"
      :space-evenly false
      (label  :text "ROOT"
      :class "metric-label")
      (scale  :min 0
        :max 101
        :active "false"
        :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}))
    
    (box :orientation "h"
      :class "metric-home"
      :space-evenly false
      (label  :text "HOME"
      :class "metric-label")
      (scale  :min 0
        :max 101
        :active "false"
        :value {round((1 - (EWW_DISK["/home"].free / EWW_DISK["/home"].total)) * 100, 0)})
    )
  )
)

; date variables
(defpoll minute :interval "10s" "date '+%M'")
(defpoll hour :interval "1m" "date '+%H'")
(defpoll weekday :interval "1m" "date '+%A'")

; system information variables
(defpoll ram :interval "1s" "echo $(printf %.$4f $(free -m | grep Mem | awk '{print ($3/$2)*100}'))")
(defpoll vol :interval "1s" "pulsemixer --get-volume | awk '{print $1}'")
(defpoll cpu :interval "1s" "echo `top -b -n1 | grep \"Cpu(s)\" | awk '{print $2 + $4}'`")

; play-pause
(defpoll play_icon :interval "1s" "./scripts/musicplayer.sh glyph")
(defpoll play_tooltip :interval "5s" "./scripts/musicplayer.sh tooltip")

(defwindow outer-window-a
  :geometry (geometry :x "1640px"
    :y "36px"
    :width "270px"
    :height "300px"
  )
  (outer-window)
)

(defwindow outer-window-b
  :geometry (geometry :x "1640px"
    :y "346px"
    :width "270px"
    :height "180px"
  )
  (outer-window)
)

(defwindow outer-window-c
  :geometry (geometry :x "1640px"
    :y "536px"
    :width "270px"
  :height "195px")
  (outer-window)
)

(defwindow outer-window-d
  :geometry (geometry :x "1570px"
    :y "312px"
    :width "60px"
  :height "250px")
  (outer-window)
)

(defwindow date
  :geometry (geometry :x "1650px"
    :y "46px"
    :width "250px"
    :height "90px"
  )
  (date)
)

(defwindow profile
  :geometry (geometry :x "1650px"
    :y "356px"
    :width "250px"
    :height "90px"
  )
  (profile)
)

(defwindow quicksettings
  :geometry (geometry :x "1650px"
    :y "456px"
    :width "250px"
    :height "60px"
  )
  (quicksettings)
)

(defwindow calendar
  :geometry (geometry :x "1650px"
    :y "146px"
    :width "250px"
  :height "40px")
  (cal)
)

(defwindow system
  :geometry (geometry :x "1650px"
    :y "547px"
    :width "250px"
  :height "80px")
  (system))

(defwindow disks
  :geometry (geometry :x "1650px"
    :y "652px"
    :width "250px"
  :height "60")
  (disks))

(defwindow powermenu
  :geometry (geometry :x "1580"
    :y "322"
    :width "40"
  :height "240")
  (powermenu))
